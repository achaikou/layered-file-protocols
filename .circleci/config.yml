version: 2.1

commands:
  install_build_deps:
    parameters:
      sudo:
        type: boolean
        default: false
      extra:
        type: string
        default: ""
    steps:
      - run:
          name: Install dependencies
          command: |
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get update
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get install \
            -y cmake g++ git libfmt-dev << parameters.extra >>

  cmake_build:
    description: Build and test
    parameters:
      type:
        description: Build type
        type: enum
        default: Release
        enum: ["Release", "Debug", "RelWithDebInfo"]
      scan:
        description: scan-build or similar command prefix
        type: string
        default: ""
      cmakeflags:
        description: Extra cmake flags
        type: string
        default: ""
      cxxflags:
        description: Extra c++ flags
        type: string
        default: ""
    steps:
      - run:
          name: Configure
          command: |
            mkdir build
            cd build
            << parameters.scan >> \
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                  -DCMAKE_BUILD_TYPE=<< parameters.type >> \
                  -DCMAKE_CXX_FLAGS=<< parameters.cxxflags >> \
                  << parameters.cmakeflags >> \
                  ..
      - run:
          name: Build and install
          command: << parameters.scan >> cmake --build build --target install
      - run:
          name: Test
          command: |
            cd build
            ctest --output-on-failure

jobs:
  bigendian:
    docker:
      - image: cimg/base:2020.01 #image can be anything
    #no increased resources, remote docker has just 2 cores
    steps:
      - checkout
      - run:
          name: Put Build Dockerfile to correct place
          command: |
            cp ~/project/.circleci/Dockerfile ~/project/Dockerfile
 
      - setup_remote_docker:
          version: 18.09.3
          #docker_layer_caching: true
          
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
 
      - run:
          name: Build the image
          command: |
            export DOCKER_BUILDKIT=1
            docker build -t lfp --progress plain  .
        

  bigendian_machine:
    environment:
      DOCKERHUB_USERNAME: eqachaikou
      SETUP_IMAGE_NAME: ci_lfp_bigendian_setup
      SETUP_IMAGE_TAG: version1.0 #increase to recreate setup
      #DOCKERHUB_USERNAME is defined in CircleCI projects settings - environment variables
      #DOCKERHUB_LFP_ACCESS_TOKEN is defined in CircleCI project settings - environment variables
    machine: #for now using machine as we would need to run privileged container  
      # other option is to try remote docker with explicitly set docker version
      image: ubuntu-1604:201903-01 #is docker 18.09, so should contain buildKit
    resource_class: large
    steps:
      - checkout
      #- run: ls -al ~/project #check that actually lfp is copied 
      #- run: pwd #check where exactly we are 

      # attempt default flow from multiarch
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      #- run: docker run --rm -t s390x/debian uname -m

      # we now are required to run commands inside docker
      # for now use a docker file, will see if it makes sense later

      #- restore_cache:
      #    key: deps1-{{ .Branch }}-{{ checksum "~/project/.circleci/bigendian-setup-dockerfile" }}
      
      #- run:
      #    name: Prepare the build
      #    command: |
      #    
      #      cp ~/project/.circleci/bigendian-setup-dockerfile ~/project/Dockerfile
      #      docker build -t lfp_bigendian_setup .
 
 
 # setup image step, for now condition and action do not match
 
      - run:
          name: Create artifacts directory
          command: |
            mkdir artifacts
 
      - run:
          name: Build image if needed
          command: |
          
            #better option would be to use docker manifest inspect $IMAGE:$TAG but it's still experimental
            function tag_exists() {
                curl --silent -f -lSL https://index.docker.io/v1/repositories/$1/tags/$2 > /dev/null
            }

            if ! tag_exists $DOCKERHUB_USERNAME/$SETUP_IMAGE_NAME $SETUP_IMAGE_TAG; then
               cp ~/project/.circleci/images/setup/Dockerfile ~/project/Dockerfile
               export DOCKER_BUILDKIT=1
               docker build -t $SETUP_IMAGE_NAME --progress plain .
               #export DOCKER_BUILDKIT=0
               docker tag $SETUP_IMAGE_NAME $DOCKERHUB_USERNAME/$SETUP_IMAGE_NAME:$SETUP_IMAGE_TAG
               
               docker save $SETUP_IMAGE_NAME > ~/project/artifacts/lfp_bigendian_setup.tar
            fi
      
 
      - store_artifacts:
          path: ~/project/artifacts  #assume it's there
 
      - deploy:
          name: Upload image if exists and is allowed
          command: |
          
            if [[ "$(docker images -q $DOCKERHUB_USERNAME/$SETUP_IMAGE_NAME:$SETUP_IMAGE_TAG 2> /dev/null)" == "" ]]; then
               echo "No new setup image was buid"
            else
               echo "Image exists locally"
               
               if [ -n "$CIRCLE_PR_NUMBER" ]; then
                   echo "Run from PR. No deployment from PRs"
               else
                   echo "Not a PR. Secrets must be available"
                   #do we want this deployment as automated?
                   echo "$DOCKERHUB_LFP_ACCESS_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
                   docker push $DOCKERHUB_USERNAME/$SETUP_IMAGE_NAME:$SETUP_IMAGE_TAG
               fi               
            fi
 
 
     # - run:
     #     name: Put setup Dockerfile to correct place
     #     command: |
     #       cp ~/project/.circleci/images/setup/Dockerfile ~/project/Dockerfile
 
     # - run:
     #     name: Build the setup image
     #     command: |
     #       export DOCKER_BUILDKIT=1
     #       docker build -t lfp_bigendian_setup --progress plain .
            
      #lfp_bigendian_setup should be accessible for futher docker image command
            
      #expected this is not needed. Upload-to-container-registry step can be commented out for testing purpose
             
      #- run:
      #    name: Save image #step for manual future upload
      #    command: |
      #      docker save lfp_bigendian_setup > lfp_bigendian_setup.tar
      #      
      #- store_artifacts:
      #    path: /project/lfp_bigendian_setup.tar  #assume it's there
 
 
      - run:
          name: Put Build Dockerfile to correct place
          command: |
            cp ~/project/.circleci/images/build/Dockerfile ~/project/Dockerfile
 
      - run:
          name: Build the image (and run it??)
          command: |
            export DOCKER_BUILDKIT=1
            docker build -t lfp --progress plain --build-arg image=$DOCKERHUB_USERNAME/$SETUP_IMAGE_NAME:$SETUP_IMAGE_TAG  .
            #docker run --rm lfp
            
  gcc:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - cmake_build

  clang:
    docker:
      - image: debian:stable
    environment:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
    steps:
      - checkout
      - install_build_deps:
          extra: clang
      - cmake_build

  debug:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - cmake_build:
          type: Debug
          cxxflags: -Werror

  docs-and-examples:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps:
          extra: python3-breathe python3-sphinx doxygen
      - cmake_build:
          cmakeflags: -DBUILD_DOC=ON -DBUILD_EXAMPLES=ON

  scan-build:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps:
          extra: clang clang-tools libfindbin-libs-perl
      - cmake_build:
          scan: scan-build --status-bugs

  ubsan:
    docker:
      - image: ubuntu:rolling
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - install_build_deps:
          extra: libubsan1
      - cmake_build:
          type: RelWithDebInfo
          cxxflags: -fsanitize=address,undefined

workflows:
  version: 2

  build:
    jobs:
       - bigendian
  #    - gcc
  #    - clang
  #    - debug
  #    - docs-and-examples

  #static-analysis:
  #  jobs:
  #    - scan-build

  #runtime-analysis:
  #  jobs:
  #    - ubsan
